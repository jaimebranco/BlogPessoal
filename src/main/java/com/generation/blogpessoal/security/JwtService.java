package com.generation.blogpessoal.security;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component /* @Component, o que indica que esta Classe √© uma Classe de Componente. Classe de Componente √© uma Classe gerenciada 
pelo Spring, que permite Injetar e Instanciar qualquer Depend√™ncia especificada na implementa√ß√£o da Classe, em qualquer outra 
Classe, sempre que necess√°rio.*/
public class JwtService {
	public static final String SECRET	= "5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437";
	/*O atributo SECRET. Este atributo armazenar√° a Chave de assinatura do Token JWT (secret). Este Atributo foi definido com o 
	 * modificador final, porque este valor ser√° constante, ou seja, nunca ser√° modificado. Foi definido tamb√©m o modificador static,
	 *  porque o atributo deve estar associado apenas e exclusivamente a esta Classe, ou seja, √© uma vari√°vel de Classe e n√£o do 
	 *  Objeto*/
	/*O valor atribu√≠do ao atributo SECRET √© uma chave encriptada aleat√≥ria, gerada atrav√©s do algoritmo de Criptografia AES.
    O Advanced Encryption Standard (AES) √© uma especifica√ß√£o para a criptografia de dados eletr√¥nicos estabelecida pelo Instituto 
    Nacional de Padr√µes e Tecnologia (NIST) dos EUA em 2001. AES √© amplamente utilizado hoje em dia, pois √© um algoritmo que geram
     chaves muito fortes, dif√≠ceis de serem quebradas.
     Para gerar esta chave, utilizamos o site Key Generator (https://generate-random.org/encryption-key-generator),*/
	
	private Key getSignKey() {
		/*getSignKey(), retornar√° um Objeto da Interface Key, que √© respons√°vel por definir as 3 caracter√≠sticas compartilhadas 
		 * por todos os objetos do tipo key (Chave de assinatura): Algoritmo, Codifica√ß√£o e Formato.*/
		byte [] keyBytes = Decoders.BASE64.decode(SECRET);
		/*Linha 24: Foi criado um vetor (array), chamado keyBytes, tipo Byte para receber o resultado da codifica√ß√£o em Base 64.
		 *  O vetor (array) keyBytes foi definido com o tipo Byte, porque durante o processo de codifica√ß√£o √© necess√°rio trabalhar 
		 *  diretamente com os bits (0 e 1) da String. Para codificar a SECRET, foi utilizado o M√©todo decode(), da Classe Decoders.*/
		return Keys.hmacShaKeyFor(keyBytes);
		/*Base64 √© um m√©todo para codifica√ß√£o de dados para transfer√™ncia de conte√∫do na Internet. √â utilizado frequentemente para
		transmitir dados bin√°rios por meios de transmiss√£o que lidam apenas com texto, como por exemplo para enviar, arquivos 
		anexos por e-mail.
    	HMAC SHA256 (HS256) √© um tipo de algoritmo de hash, com chave, que √© constru√≠do a partir da fun√ß√£o hash SHA-256 e usado 
    	como um c√≥digo de autentica√ß√£o de mensagem baseado em hash (HMAC).
    	HS256 √© um m√©todo de assinatura sim√©trica. Isso significa que a mesma chave secreta √© usada para criar e verificar a 
    	pr√≥pria assinatura. O emissor anexa o cabe√ßalho JWT e a carga com a chave secreta e faz o hash do resultado usando SHA256,
    	 criando uma assinatura. O destinat√°rio usa suas c√≥pias da chave secreta, cabe√ßalho JWT e carga √∫til da mesma maneira
    	  para reproduzir a assinatura, verificando se eles correspondem.*/
	}
	
	private Claims extractAllClaims(String token) {
		/*O M√©todo extractAllClaims(String token) retorna todas as claims, inseridas no Payload do Token JWT.
		 * Claims s√£o declara√ß√µes inseridas no payload do Token JWT, ou seja, s√£o informa√ß√µes declaradas sobre um assunto.
		 * "sub": "admin@email.com.br"
		 * sub √© uma claim, que cont√©m o e-mail do usu√°rio.*/
		return Jwts.parserBuilder()
				/*Atrav√©s do M√©todo parserBuilder(), da Classe Jwts, ser√° criada uma nova inst√¢ncia da Interface JWT. */
				.setSigningKey(getSignKey()).build()
				.parseClaimsJws(token).getBody();
		/*setSigningKey(getSignKey()).build(), da Interface JwtParserBuilder, verifica se a assinatura do Token JWT √© v√°lida. 
		 * Caso seja v√°lida, o M√©todo parseClaimsJws(token).getBody(), da Interface JwtParser, extrai todas as claims do corpo 
		 * do Token e retorna todas as claims encontradas, atrav√©s do comando return.*/
	}
	
	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		/*O M√©todo extractClaim(String token, Function< Claims, T > claimsResolver) retorna uma claim espec√≠fica, inserida no
		Payload do Token JWT.*/
		final Claims claims = extractAllClaims(token);
		/*Cria um Objeto final, da Interface Claims, que receber√° a execu√ß√£o do M√©todo extractAllClaims(String token), que retornar√° 
		 * todas as claims que forem encontradas no corpo do token enviado no par√¢metro do M√©todo.*/
		return claimsResolver.apply(claims);
		/* O M√©todo get enviado no par√¢metro da Interface Funcional Function< Claims, T > claimsResolver, ser√° executado, atrav√©s 
		 * do M√©todo claimsResolver.apply(claims), da Interface Funcional Function. Como par√¢metro do M√©todo apply(), ser√° utilizado
		 *  o Objeto claims, que cont√©m todas as claims obtidas atrav√©s do M√©todo extractAllClaims(String token).*/
	}
	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}
	public Date extractExpiration(String token) {
		/*O M√©todo extractExpiration(String token) recupera os dados da Claim exp, onde se encontra a data e o hor√°rio de expira√ß√£o 
		 * do Token JWT, atrav√©s do M√©todo extractClaim(String token, Function< Claims, T > claimsResolver).*/
		return extractClaim(token, Claims::getExpiration);
		/*A Interface Funcional Function recebeu como entrada a Classe Claims e na sa√≠da, receber√° a execu√ß√£o do M√©todo getExpiration(),
		que est√° sendo chamado atrav√©s do operador de refer√™ncia de m√©todos (::), que retorna o valor da claim exp.*/
	}
	private Boolean isTokenExpired(String token) {
		/*O M√©todo isTokenExpired(String token) recupera os dados da Claim exp, onde se encontra a data e o hor√°rio de expira√ß√£o do Token
		 *  JWT, atrav√©s do M√©todo extractExpiration(String token) */
		return extractExpiration(token).before(new Date());
		/*erifica atrav√©s do M√©todo before(), da Classe Date, se o token est√° ou n√£o expirado (fora da data e hora de validade). Se a data
		 *  e a hora do token for anterior a data e hora atual, o Token JWT estar√° expirado, o M√©todo retornar√° true e ser√° necess√°rio
		*autenticar novamente para gerar um novo Token JWT v√°lido.*/
	}
	public Boolean validateToken(String token, UserDetails userDetails) {
		/*O M√©todo validateToken(String token, UserDetails userDetails) valida se o Token JWT pertence ao usu√°rio que enviou o token atrav√©s
		 *  do Cabe√ßalho de uma requisi√ß√£o HTTP, na propriedade Authorization. */
		final String username = extractUsername(token);
		/*Cria um Objeto final, do tipo String, chamado username, que receber√° a execu√ß√£o do M√©todo extractUsername(String token), que
		 *  retornar√° a claim sub (subject), que cont√©m o usuario autenticado (e-mail), que foi inserido no corpo do token, que foi enviado
		 *   no par√¢metro do M√©todo.*/
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
		/* O M√©todo retornar√° true se o usuario que foi extra√≠do do token (claim sub), for igual ao usuario autenticado (atributo username 
		 * do Objeto da Classe UserDetails) e o token n√£o estiver expirado (!isTokenExpired(token)). Para checar o usuario, foi utilizado 
		 * m√©todo equals() da Classe String. Para checar se o token expirou, foi utilizado o M√©todo isTokenExpired(String token).*/
	}
	private String createToken(Map<String, Object>claims, String userName) {
		/*O M√©todo createToken(Map<String, Object> claims, String userName) cria o Token JWT. O M√©todo recebe 2 par√¢metros: uma 
		 * Collection Map, chamada claims, que ser√° utilizada para receber Claims personalizadas e um Objeto da Classe String, chamado 
		 * userName, contendo o usu√°rio autenticado (e-mail).*/
		return Jwts.builder()
				/*O M√©todo builder(), da Classe Jwts √© respons√°vel por criar o Token, a partir dos M√©todos inseridos logo abaixo, que 
				 * cont√©m os detalhes da constru√ß√£o do Token JWT.*/
				.setClaims(claims)
				/* O M√©todo .setClaims(claims), da Classe Jwts √© respons√°vel por inserir as claims personalizadas no Payload do Token JWT.*/
				.setSubject(userName)
				/*O M√©todo .setSubject(userName), da Classe Jwts √© respons√°vel por inserir a claim sub (subject), preenchida com o usuario 
				 * (e-mail), no Payload do Token JWT.*/
				.setIssuedAt(new Date(System.currentTimeMillis()))
				/* M√©todo .setIssuedAt(new Date(System.currentTimeMillis())), da Classe Jwts √© respons√°vel por inserir a claim iat
				 *  (issued at - data e hora da cria√ß√£o), preenchida com a data e a hora (incluindo os milissegundos da hora) exata do 
				 *  momento da cria√ß√£o do token, no Payload do Token JWT.*/
				.setExpiration(new Date(System.currentTimeMillis()+1000 * 60 * 60))
				/*O M√©todo .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)), da Classe Jwts √© respons√°vel por inserir 
				 * a claim exp (expiration - data e hora da expira√ß√£o), preenchida com a data e a hora (incluindo os milissegundos da hora) 
				 * exata do momento da cria√ß√£o do token, somada ao tempo limite do token, no Payload do Token JWT. Em nosso exemplo, o limite 
				 * de expira√ß√£o do Token √© de 60 minutos ü°™ 1 hora./ 60.000 milisegundos =1 minuto/1000 * 60 * 60 = 3.600.000 milissegundos */
				.signWith(getSignKey(), SignatureAlgorithm.HS256).compact();
				/*O M√©todo .signWith(getSignKey(), SignatureAlgorithm.HS256).compact(), da Classe Jwts, √© respons√°vel por inserir a assinatura
				 *  do Token (M√©todo getSignKey()) e o Algoritmo de Encripta√ß√£o do Token JWT (HMAC SHA256 - HS256) do Token JWT. O 
				 *  M√©todo .compact() finaliza a cria√ß√£o do Token JWT e o serializa em uma String compacta e segura para URL, de acordo 
				 *  com as regras do JWT. / O Algoritmo de Encripta√ß√£o do Token JWT ser√° inserido no Header (Cabe√ßalho do Token JWT), na forma 
				 *  de um Objeto JSON, */
	}
	public String generateToken(String userName) {
		Map<String, Object> claims = new HashMap<>();
		return createToken(claims, userName);
	}
	

}
