package com.generation.blogpessoal.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;
import com.generation.blogpessoal.repository.TemaRepository;

import jakarta.validation.Valid;

@RestController /*deÔ¨Åne que a Classe √© do tipo RestController, que receber√° requisi√ß√µes que ser√£o compostas por:
    *URL: Endere√ßo da requisi√ß√£o (endpoint)
    *Verbo: Define qual M√©todo HTTP ser√° acionado na Classe controladora.
    *Corpo da requisi√ß√£o (Request Body): Objeto que cont√©m os dados que ser√£o persistidos no Banco de dadas. Nem
    * toda a requisi√ß√£o enviar√° dados no Corpo da Requisi√ß√£o.*/

@RequestMapping("/postagens") /*√© usada para mapear as solicita√ß√µes para os M√©todos da Classe controladora 
	*PostagemController, ou seja, define a URL (endere√ßo) padr√£o do Recurso (/postagens).*/ 
@CrossOrigin(origins = "*", allowedHeaders = "*") /*indica que a Classe controladora permitir√° o recebimento de 
	*requisi√ß√µes realizadas de fora do dom√≠nio (localhost e futuramente da nuvem quando o Deploy da aplica√ß√£o for 
	*efetivado) ao qual ela pertence. Essa anota√ß√£o √© essencial para que o front-end ou aplicativo mobile, tenha acesso
 	*aos M√©todos e Recursos da nossa aplica√ß√£o (O termo t√©cnico √© consumir a API).*/
	/*Anota√ß√£o libera tamb√©m os Cabe√ßalhos das Requisi√ß√µes (par√¢metro allowedHeaders), que em alguns casos trazem
	*informa√ß√µes essenciais para o correto funcionamento da aplica√ß√£o.*/
public class PostagemController {
	
		@Autowired
		private PostagemRepository postagemRepository;
		
		@Autowired
		private TemaRepository temaRepository;
		
		
		@GetMapping //mapeia todas as Requisi√ß√µes HTTP GET, enviadas para um endere√ßo espec√≠fico, chamado endpoint, dentro do Recurso Postagem
		public ResponseEntity<List<Postagem>> getAll(){ 
			/* O m√©todo ResponseEntity √© uma classe do Spring Framework que representa toda a 
		resposta HTTP, incluindo o status, os cabe√ßalhos e o corpo da resposta. Ele √© muito √∫til para controlar de forma detalhada o que 
		ser√° retornado ao cliente em uma aplica√ß√£o web.*/
			/* public ResponseEntity<List<Postagem>> getAll(): Este √© o m√©todo que ser√° executado quando uma requisi√ß√£o GET for enviada para o
			 *  endpoint mapeado.
		     * ResponseEntity<List<Postagem>>: O m√©todo retorna um ResponseEntity contendo uma lista de objetos Postagem. Isso permite controlar
		     *  a resposta HTTP de forma detalhada.
		     * getAll(): Nome do m√©todo, que indica que ele retorna todas as postagens.*/

			return ResponseEntity.ok(postagemRepository.findAll());

		    /* postagemRepository.findAll(): Este m√©todo do reposit√≥rio (postagemRepository) √© chamado para buscar todas as postagens no banco
		     * de dados. Ele retorna uma lista de objetos Postagem.		     
		     * ResponseEntity.ok(...): Cria uma resposta HTTP com status 200 OK e inclui a lista de postagens no corpo da resposta.*/

		}
		@GetMapping("/{id}") /*Esta anota√ß√£o indica que o m√©todo getById ser√° chamado quando uma requisi√ß√£o HTTP GET for feita para a URL que 
		cont√©m um par√¢metro {id}. Por exemplo, se a URL for /postagens/1, o valor 1 ser√° passado como par√¢metro id.*/
		public ResponseEntity<Postagem> getById(@PathVariable Long id) { /*M√©todo getById: Este m√©todo recebe um par√¢metro id do tipo Long, que
		 √© extra√≠do da URL gra√ßas √† anota√ß√£o @PathVariable.*/
			return postagemRepository.findById(id) //Este m√©todo retorna um Optional<Postagem>, que pode ou n√£o conter uma postagem.
					.map(resposta -> ResponseEntity.ok(resposta)) /*Se uma postagem for encontrada, ela √© mapeada para uma resposta HTTP 200 OK 
					contendo a postagem.*/
					.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build()); /*Se nenhuma postagem for encontrada, retorna uma resposta HTTP
					 404 NOT FOUND.*/
		}
		@GetMapping("/titulo/{titulo}")
		public ResponseEntity<List<Postagem>> GetByTitulo(@PathVariable String titulo){
			return ResponseEntity.ok(postagemRepository.findAllByTituloContainingIgnoreCase(titulo));
			/*ResponseEntity.ok(postagens): Se a busca for bem-sucedida, o m√©todo retorna uma resposta HTTP 200 OK contendo a lista de postagens 
			 * encontradas.*/
		}
		@PostMapping //Esta anota√ß√£o indica que o m√©todo post ser√° chamado quando uma requisi√ß√£o HTTP POST for feita para o endpoint correspondente
		public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem){
			if(temaRepository.existsById(postagem.getTema().getId()))
				return ResponseEntity.status(HttpStatus.CREATED)
			/*return ResponseEntity.status(HttpStatus.CREATED)
					/*O m√©todo recebe um par√¢metro postagem do tipo Postagem, que √© extra√≠do do corpo da requisi√ß√£o HTTP gra√ßas √† anota√ß√£o 
					 * @RequestBody. A anota√ß√£o @Valid √© usada para validar o objeto postagem com base nas anota√ß√µes de valida√ß√£o presentes na 
					 * classe Postagem (como @NotBlank e @Size).*/

					.body(postagemRepository.save(postagem));
			/*postagemRepository.save(postagem): Este m√©todo salva a nova postagem no banco de dados. O reposit√≥rio postagemRepository √©
			 *  respons√°vel por realizar a opera√ß√£o de salvamento.*/
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Tema n√£o existe!", null);
		}
		@PutMapping //indica que o M√©todo put(Postagem postagem), responder√° a todas as requisi√ß√µes do tipo HTTP PUT,
		public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem){
			/* O m√©todo recebe um par√¢metro postagem do tipo Postagem, que √© extra√≠do do corpo da requisi√ß√£o HTTP gra√ßas √† anota√ß√£o @RequestBody.
		    A anota√ß√£o @Valid √© usada para validar o objeto postagem com base nas anota√ß√µes de valida√ß√£o presentes na classe Postagem.
			return postagemRepository.findById(postagem.getId())
					/*postagemRepository.findById(postagem.getId()): Este m√©todo tenta encontrar uma postagem no reposit√≥rio usando o ID 
					 * da postagem fornecida. Ele retorna um Optional<Postagem>.
					.map(resposta -> ResponseEntity.status(HttpStatus.OK).body(postagemRepository.save(postagem))) Se uma postagem for 
					encontrada, o m√©todo mapeia a resposta para um status HTTP 200 Ok
						.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
						//Se nenhuma postagem for encontrada, retorna uma resposta HTTP 404 NOT FOUND.*/
			if (postagemRepository.existsById(postagem.getId())) {
				
				if(temaRepository.existsById(postagem.getTema().getId()))
					return ResponseEntity.status(HttpStatus.OK)
							.body(postagemRepository.save(postagem));
				
				throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Tema n√£o existe", null);
				
			}
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		@ResponseStatus(HttpStatus.NO_CONTENT)/* indica que o M√©todo delete(Long id), ter√° um Status HTTP espec√≠fico quando a Requisi√ß√£o for 
		bem sucedida, ou seja, ser√° retornado o HTTP Status NO_CONTENT ü°™ 204, ao inv√©s do HTTP Status OK ü°™ 200 como resposta padr√£o do M√©todo.*/
		@DeleteMapping("/{id}")/*mapeia todas as Requisi√ß√µes HTTP DELETE, enviadas para um endere√ßo espec√≠fico (Endpoint), dentro do Recurso 
		Postagem, para um M√©todo espec√≠fico que responder√° as requisi√ß√µes, ou seja, ele indica que o M√©todo delete( Long id ), responder√° a todas 
		as requisi√ß√µes do tipo HTTP DELETE, enviadas no endere√ßo http://localhost:8080/postagens/id, onde id √© uma Vari√°vel de Caminho 
		(Path Variable), que receber√° o id da Postagem que ser√° Deletada.*/
		public void delete(@PathVariable Long id) { /*O m√©todo recebe um par√¢metro id do tipo Long, que √© extra√≠do da URL gra√ßas √† anota√ß√£o
		 @PathVariable.*/
			Optional<Postagem> postagem = postagemRepository.findById(id); /*Optional<Postagem> postagem = postagemRepository.findById(id): 
			O m√©todo tenta encontrar uma postagem no reposit√≥rio usando o ID fornecido. Ele retorna um Optional<Postagem>.*/
			
			if(postagem.isEmpty()) /*if(postagem.isEmpty()): Se a postagem n√£o for encontrada (ou seja, o Optional est√° vazio), o m√©todo lan√ßa
			 uma exce√ß√£o ResponseStatusException com o status HTTP 404 NOT FOUND.*/
				throw new ResponseStatusException(HttpStatus.NOT_FOUND);
			/*throw new ResponseStatusException(HttpStatus.NOT_FOUND): Esta linha lan√ßa uma exce√ß√£o que resulta em uma resposta HTTP 404
			 *  NOT FOUND se a postagem n√£o for encontrada.*/
			postagemRepository.deleteById(id);
			//Esta linha de c√≥digo deleta a postagem do banco de dados usando o ID fornecido.
		}
		

}
